def fib_mypyc(n):
    n :: int
    r0 :: native_int
    r1, r2, r3 :: bit
    r4, r5, r6, r7, r8, r9, r10 :: int
L0:
    r0 = n & 1
    r1 = r0 != 0
    if r1 goto L1 else goto L2 :: bool
L1:
    r2 = CPyTagged_IsLt_(n, 4)
    if r2 goto L3 else goto L4 :: bool
L2:
    r3 = n < 4 :: signed
    if r3 goto L3 else goto L4 :: bool
L3:
    inc_ref n :: int
    r4 = n
    goto L7
L4:
    r5 = CPyTagged_Subtract(n, 2)
    r6 = fib_mypyc(r5)
    dec_ref r5 :: int
    if is_error(r6) goto L8 (error at fib_mypyc:7) else goto L5
L5:
    r7 = CPyTagged_Subtract(n, 4)
    r8 = fib_mypyc(r7)
    dec_ref r7 :: int
    if is_error(r8) goto L9 (error at fib_mypyc:7) else goto L6
L6:
    r9 = CPyTagged_Add(r6, r8)
    dec_ref r6 :: int
    dec_ref r8 :: int
    r4 = r9
L7:
    return r4
L8:
    r10 = <error> :: int
    return r10
L9:
    dec_ref r6 :: int
    goto L8

def fib_np_mypyc(n):
    n :: int
    r0 :: native_int
    r1, r2, r3, r4 :: bit
    r5 :: list
    r6, r7 :: object
    r8, r9, r10 :: ptr
    r11 :: list
    r12, r13 :: object
    r14, r15, r16 :: ptr
    r17 :: list
    r18, r19, r20 :: ptr
    r21 :: object
    r22 :: str
    r23, r24 :: object
    r25 :: str
    r26 :: object
    r27 :: object[2]
    r28 :: object_ptr
    r29, r30, matrix :: object
    r31 :: int
    r32 :: object
    r33 :: str
    r34 :: object
    r35 :: str
    r36, r37 :: object
    r38 :: object[2]
    r39 :: object_ptr
    r40, result :: object
    r41 :: tuple[int, int]
    r42, r43, r44 :: object
    r45 :: object[1]
    r46 :: object_ptr
    r47 :: object
    r48, r49 :: int
L0:
    r0 = n & 1
    r1 = r0 != 0
    if r1 goto L1 else goto L2 :: bool
L1:
    r2 = CPyTagged_IsLt_(0, n)
    if r2 goto L4 else goto L3 :: bool
L2:
    r3 = n <= 0 :: signed
    if r3 goto L3 else goto L4 :: bool
L3:
    return 0
L4:
    r4 = n == 2
    if r4 goto L5 else goto L6 :: bool
L5:
    return 2
L6:
    r5 = PyList_New(2)
    if is_error(r5) goto L19 (error at fib_np_mypyc:17) else goto L7
L7:
    r6 = object 1
    r7 = object 1
    r8 = get_element_ptr r5 ob_item :: PyListObject
    r9 = load_mem r8 :: ptr*
    inc_ref r6
    set_mem r9, r6 :: builtins.object*
    r10 = r9 + 8
    inc_ref r7
    set_mem r10, r7 :: builtins.object*
    r11 = PyList_New(2)
    if is_error(r11) goto L20 (error at fib_np_mypyc:18) else goto L8
L8:
    r12 = object 1
    r13 = object 0
    r14 = get_element_ptr r11 ob_item :: PyListObject
    r15 = load_mem r14 :: ptr*
    inc_ref r12
    set_mem r15, r12 :: builtins.object*
    r16 = r15 + 8
    inc_ref r13
    set_mem r16, r13 :: builtins.object*
    r17 = PyList_New(2)
    if is_error(r17) goto L21 (error at fib_np_mypyc:16) else goto L9
L9:
    r18 = get_element_ptr r17 ob_item :: PyListObject
    r19 = load_mem r18 :: ptr*
    set_mem r19, r5 :: builtins.object*
    r20 = r19 + 8
    set_mem r20, r11 :: builtins.object*
    r21 = numpy :: module
    r22 = 'int64'
    r23 = CPyObject_GetAttr(r21, r22)
    if is_error(r23) goto L22 (error at fib_np_mypyc:20) else goto L10
L10:
    r24 = numpy :: module
    r25 = 'array'
    r26 = CPyObject_GetAttr(r24, r25)
    if is_error(r26) goto L23 (error at fib_np_mypyc:15) else goto L11
L11:
    r27 = [r17, r23]
    r28 = load_address r27
    r29 = ('dtype',)
    r30 = _PyObject_Vectorcall(r26, r28, 1, r29)
    dec_ref r26
    if is_error(r30) goto L23 (error at fib_np_mypyc:15) else goto L12
L12:
    dec_ref r17
    dec_ref r23
    matrix = r30
    r31 = CPyTagged_Subtract(n, 2)
    r32 = numpy :: module
    r33 = 'linalg'
    r34 = CPyObject_GetAttr(r32, r33)
    if is_error(r34) goto L24 (error at fib_np_mypyc:23) else goto L13
L13:
    r35 = 'matrix_power'
    r36 = CPyObject_GetAttr(r34, r35)
    dec_ref r34
    if is_error(r36) goto L24 (error at fib_np_mypyc:23) else goto L14
L14:
    r37 = box(int, r31)
    r38 = [matrix, r37]
    r39 = load_address r38
    r40 = _PyObject_Vectorcall(r36, r39, 2, 0)
    dec_ref r36
    if is_error(r40) goto L25 (error at fib_np_mypyc:23) else goto L15
L15:
    dec_ref matrix
    dec_ref r37
    result = r40
    r41 = (0, 0)
    r42 = box(tuple[int, int], r41)
    r43 = PyObject_GetItem(result, r42)
    dec_ref result
    dec_ref r42
    if is_error(r43) goto L19 (error at fib_np_mypyc:25) else goto L16
L16:
    r44 = load_address PyLong_Type
    r45 = [r43]
    r46 = load_address r45
    r47 = _PyObject_Vectorcall(r44, r46, 1, 0)
    if is_error(r47) goto L26 (error at fib_np_mypyc:25) else goto L17
L17:
    dec_ref r43
    r48 = unbox(int, r47)
    dec_ref r47
    if is_error(r48) goto L19 (error at fib_np_mypyc:25) else goto L18
L18:
    return r48
L19:
    r49 = <error> :: int
    return r49
L20:
    dec_ref r5
    goto L19
L21:
    dec_ref r5
    dec_ref r11
    goto L19
L22:
    dec_ref r17
    goto L19
L23:
    dec_ref r17
    dec_ref r23
    goto L19
L24:
    dec_ref matrix
    dec_ref r31 :: int
    goto L19
L25:
    dec_ref matrix
    dec_ref r37
    goto L19
L26:
    dec_ref r43
    goto L19

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5 :: object_ptr
    r6 :: object_ptr[1]
    r7 :: c_ptr
    r8 :: native_int[1]
    r9 :: c_ptr
    r10 :: object
    r11 :: dict
    r12, r13 :: str
    r14 :: bit
    r15 :: object
    r16 :: str
    r17 :: dict
    r18, r19 :: object
    r20 :: str
    r21 :: dict
    r22 :: object
    r23 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L7 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = load_address numpy :: module
    r6 = [r5]
    r7 = load_address r6
    r8 = [1]
    r9 = load_address r8
    r10 = (('numpy', 'numpy', 'np'),)
    r11 = mypyc_fib.globals :: static
    r12 = 'mypyc_fib.py'
    r13 = '<module>'
    r14 = CPyImport_ImportMany(r10, r7, r11, r12, r13, r9)
    if not r14 goto L7 else goto L4 :: bool
L4:
    r15 = ('NDArray',)
    r16 = 'numpy.typing'
    r17 = mypyc_fib.globals :: static
    r18 = CPyImport_ImportFromMany(r16, r15, r15, r17)
    if is_error(r18) goto L7 (error at <module>:2) else goto L5
L5:
    numpy.typing = r18 :: module
    dec_ref r18
    r19 = ('cast',)
    r20 = 'typing'
    r21 = mypyc_fib.globals :: static
    r22 = CPyImport_ImportFromMany(r20, r19, r19, r21)
    if is_error(r22) goto L7 (error at <module>:3) else goto L6
L6:
    typing = r22 :: module
    dec_ref r22
    return 1
L7:
    r23 = <error> :: None
    return r23
